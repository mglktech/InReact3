/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void btnExecute_clicked(GButton source, GEvent event) { //_CODE_:btnExecute:366787:
  println("btnExecute - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:btnExecute:366787:

public void btnSettings_clicked(GButton source, GEvent event) { //_CODE_:btnSettings:548046:
  println("btnSettings - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:btnSettings:548046:

public void sliMul_changed(GSlider2D source, GEvent event) { //_CODE_:sliMul:539596:
  println("sliMul - GSlider2D >> GEvent." + event + " @ " + millis());
} //_CODE_:sliMul:539596:

public void lstSelectLight_clicked(GDropList source, GEvent event) { //_CODE_:lstSelectLight:986569:
  println("lstSelectLight - GDropList >> GEvent." + event + " @ " + millis());
} //_CODE_:lstSelectLight:986569:

public void lstCom_clicked(GDropList source, GEvent event) { //_CODE_:lstCom:472232:
  println("lstCom - GDropList >> GEvent." + event + " @ " + millis());
} //_CODE_:lstCom:472232:

public void sliBass_changed(GSlider source, GEvent event) { //_CODE_:sliBass:936867:
  println("sliBass - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:sliBass:936867:

public void sliTreble_changed(GSlider source, GEvent event) { //_CODE_:sliTreble:312529:
  println("sliTreble - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:sliTreble:312529:

public void chkMode_clicked(GCheckbox source, GEvent event) { //_CODE_:chkMode:825927:
  println("chkMode - GCheckbox >> GEvent." + event + " @ " + millis());
} //_CODE_:chkMode:825927:

public void HandleTextboxEvents(GTextField source, GEvent event) { //_CODE_:txbTrebArraySize:489327:
  println("txbTrebArraySize - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:txbTrebArraySize:489327:

public void slider1_change1(GSlider source, GEvent event) { //_CODE_:slider1:454893:
  println("slider1 - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:slider1:454893:

synchronized public void winLightSettings_draw(PApplet appc, GWinData data) { //_CODE_:winLightSettings:737376:
  appc.background(230);
} //_CODE_:winLightSettings:737376:

public void lstLoadLightSettings_clicked(GDropList source, GEvent event) { //_CODE_:lstLoadLightSettings:671302:
  println("lstLoadLightSettings - GDropList >> GEvent." + event + " @ " + millis());
} //_CODE_:lstLoadLightSettings:671302:

public void btnNewLight_clicked(GButton source, GEvent event) { //_CODE_:btnNewLight:342577:
  println("btnNewLight - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:btnNewLight:342577:

public void txtLightsAmount_changed(GTextField source, GEvent event) { //_CODE_:txtLEDsAmount:740948:
  println("txtLEDsAmount - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:txtLEDsAmount:740948:

public void txtLightName_changed(GTextField source, GEvent event) { //_CODE_:txtLightName:539571:
  println("txtLightName - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:txtLightName:539571:

public void textfield1_change1(GTextField source, GEvent event) { //_CODE_:txbPin:456965:
  println("txbPin - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:txbPin:456965:

public void btnSave_clicked(GButton source, GEvent event) { //_CODE_:btnSave:987280:
  println("btnSave - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:btnSave:987280:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.GOLD_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("InReact Version 0.3");
  btnExecute = new GButton(this, 715, 265, 80, 30);
  btnExecute.setText("Connect");
  btnExecute.addEventHandler(this, "btnExecute_clicked");
  btnSettings = new GButton(this, 630, 265, 80, 30);
  btnSettings.setText("Settings");
  btnSettings.addEventHandler(this, "btnSettings_clicked");
  sliMul = new GSlider2D(this, 633, 160, 100, 100);
  sliMul.setLimitsX(0.5, 0.0, 10.0);
  sliMul.setLimitsY(0.5, 0.0, 10.0);
  sliMul.setNumberFormat(G4P.DECIMAL, 4);
  sliMul.setOpaque(true);
  sliMul.addEventHandler(this, "sliMul_changed");
  lstSelectLight = new GDropList(this, 690, 20, 90, 80, 3);
  lstSelectLight.setItems(loadStrings("list_986569"), 0);
  lstSelectLight.addEventHandler(this, "lstSelectLight_clicked");
  lstCom = new GDropList(this, 592, 22, 90, 80, 3);
  lstCom.setItems(loadStrings("list_472232"), 0);
  lstCom.addEventHandler(this, "lstCom_clicked");
  sliBass = new GSlider(this, 10, 190, 500, 40, 10.0);
  sliBass.setLimits(0.5, 0.0, 1.0);
  sliBass.setNumberFormat(G4P.DECIMAL, 2);
  sliBass.setOpaque(false);
  sliBass.addEventHandler(this, "sliBass_changed");
  sliTreble = new GSlider(this, 10, 220, 500, 40, 10.0);
  sliTreble.setLimits(0.5, 0.0, 1.0);
  sliTreble.setNumberFormat(G4P.DECIMAL, 2);
  sliTreble.setOpaque(false);
  sliTreble.addEventHandler(this, "sliTreble_changed");
  chkMode = new GCheckbox(this, 631, 134, 120, 20);
  chkMode.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  chkMode.setText("MODE");
  chkMode.setOpaque(false);
  chkMode.addEventHandler(this, "chkMode_clicked");
  lblDebug = new GLabel(this, 10, 270, 500, 20);
  lblDebug.setText("Debug");
  lblDebug.setOpaque(false);
  lblsliBass = new GLabel(this, 515, 200, 50, 20);
  lblsliBass.setText("0");
  lblsliBass.setTextBold();
  lblsliBass.setOpaque(false);
  lblsliTreble = new GLabel(this, 577, 230, 50, 20);
  lblsliTreble.setText("0");
  lblsliTreble.setTextBold();
  lblsliTreble.setOpaque(false);
  txbTrebArraySize = new GTextField(this, 515, 230, 50, 20, G4P.SCROLLBARS_NONE);
  txbTrebArraySize.setOpaque(true);
  txbTrebArraySize.addEventHandler(this, "HandleTextboxEvents");
  slider1 = new GSlider(this, 570, 23, 150, 100, 10.0);
  slider1.setRotation(PI/2, GControlMode.CORNER);
  slider1.setLimits(0, 0, 150);
  slider1.setNumberFormat(G4P.INTEGER, 0);
  slider1.setOpaque(false);
  slider1.addEventHandler(this, "slider1_change1");
  winLightSettings = GWindow.getWindow(this, "Light Settings", 0, 0, 300, 150, JAVA2D);
  winLightSettings.noLoop();
  winLightSettings.setActionOnClose(G4P.CLOSE_WINDOW);
  winLightSettings.addDrawHandler(this, "winLightSettings_draw");
  lstLoadLightSettings = new GDropList(winLightSettings, 10, 10, 90, 80, 3);
  lstLoadLightSettings.setItems(loadStrings("list_671302"), 0);
  lstLoadLightSettings.addEventHandler(this, "lstLoadLightSettings_clicked");
  btnNewLight = new GButton(winLightSettings, 10, 100, 40, 20);
  btnNewLight.setText("New");
  btnNewLight.addEventHandler(this, "btnNewLight_clicked");
  txtLEDsAmount = new GTextField(winLightSettings, 190, 40, 70, 20, G4P.SCROLLBARS_NONE);
  txtLEDsAmount.setOpaque(true);
  txtLEDsAmount.addEventHandler(this, "txtLightsAmount_changed");
  lblLightsAmount = new GLabel(winLightSettings, 140, 40, 40, 20);
  lblLightsAmount.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lblLightsAmount.setText("LEDs:");
  lblLightsAmount.setOpaque(false);
  lblLightName = new GLabel(winLightSettings, 120, 10, 60, 20);
  lblLightName.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lblLightName.setText("Light Name");
  lblLightName.setOpaque(false);
  txtLightName = new GTextField(winLightSettings, 190, 10, 70, 20, G4P.SCROLLBARS_NONE);
  txtLightName.setOpaque(true);
  txtLightName.addEventHandler(this, "txtLightName_changed");
  lblPin = new GLabel(winLightSettings, 140, 70, 40, 20);
  lblPin.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lblPin.setText("PIN:");
  lblPin.setOpaque(false);
  txbPin = new GTextField(winLightSettings, 190, 70, 70, 20, G4P.SCROLLBARS_NONE);
  txbPin.setOpaque(true);
  txbPin.addEventHandler(this, "textfield1_change1");
  btnSave = new GButton(winLightSettings, 60, 100, 40, 20);
  btnSave.setText("Save");
  btnSave.addEventHandler(this, "btnSave_clicked");
  winLightSettings.loop();
}

// Variable declarations 
// autogenerated do not edit
GButton btnExecute; 
GButton btnSettings; 
GSlider2D sliMul; 
GDropList lstSelectLight; 
GDropList lstCom; 
GSlider sliBass; 
GSlider sliTreble; 
GCheckbox chkMode; 
GLabel lblDebug; 
GLabel lblsliBass; 
GLabel lblsliTreble; 
GTextField txbTrebArraySize; 
GSlider slider1; 
GWindow winLightSettings;
GDropList lstLoadLightSettings; 
GButton btnNewLight; 
GTextField txtLEDsAmount; 
GLabel lblLightsAmount; 
GLabel lblLightName; 
GTextField txtLightName; 
GLabel lblPin; 
GTextField txbPin; 
GButton btnSave; 